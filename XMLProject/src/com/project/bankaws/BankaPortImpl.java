
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.project.bankaws;

import java.math.BigDecimal;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;

import com.project.common_types.TBanka;
import com.project.common_types.TBankarskiRacunKlijenta;
import com.project.common_types.TRacunKlijenta;
import com.project.mt103.Mt103;
import com.project.mt103.Mt103.PodaciOBankama;
import com.project.nalog_za_placanje.NalogZaPlacanje;
import com.project.util.Util;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2015-06-07T02:41:04.821+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "BankaService",
                      portName = "BankaPort",
                      targetNamespace = "http://www.project.com/BankaWS",
                      wsdlLocation = "file:/C:/Users/Geek/Desktop/Wp/XWSEclipse/XMLProject/WEB-INF/wsdl/Banka.wsdl",
                      endpointInterface = "com.project.bankaws.BankaPort")
                      
public class BankaPortImpl implements BankaPort {

    private static final Logger LOG = Logger.getLogger(BankaPortImpl.class.getName());

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#odradiClearing(*
     */
    public com.project.common_types.Status odradiClearing() throws ClearingFault    { 
        LOG.info("Executing operation odradiClearing");
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ClearingFault("clearingFault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT910(com.project.mt910.Mt910  mt910 )*
     */
    public com.project.common_types.Status receiveMT910(com.project.mt910.Mt910 mt910) throws ReceiveMT103Fault    { 
        LOG.info("Executing operation receiveMT910");
        System.out.println(mt910);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT103Fault("receiveMT103fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT102(com.project.mt102.Mt102  mt102 )*
     */
    public com.project.common_types.Status receiveMT102(com.project.mt102.Mt102 mt102) throws ReceiveMT102Fault    { 
        LOG.info("Executing operation receiveMT102");
        System.out.println(mt102);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT102Fault("receiveMT102fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#sendPresek(com.project.zahtev_za_izvod.ZahtevZaIzvod  zahtev )*
     */
    public com.project.presek.Presek sendPresek(com.project.zahtev_za_izvod.ZahtevZaIzvod zahtev) throws SendPresekFault    { 
        LOG.info("Executing operation sendPresek");
        System.out.println(zahtev);
        try {
            com.project.presek.Presek _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new SendPresekFault("sendPresekFault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT103(com.project.mt103.Mt103  mt103 )*
     */
    public com.project.common_types.Status receiveMT103(com.project.mt103.Mt103 mt103) throws ReceiveMT103Fault    { 
        LOG.info("Executing operation receiveMT103");
        System.out.println(mt103);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT103Fault("receiveMT103fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveNalog(com.project.nalog_za_placanje.NalogZaPlacanje  nalog )*
     */
    public com.project.common_types.Status receiveNalog(com.project.nalog_za_placanje.NalogZaPlacanje nalog) throws ReceiveNalogFault    { 
        LOG.info("Executing operation receiveNalog");
        System.out.println(nalog);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
        	if(!nalog.isHitno() || (nalog.getPlacanje().getUplata().getIznos().compareTo(BigDecimal.valueOf(250000.0)) == -1)){
        		//Clearing
        	} else {
        		//RTGS
        		//proveriti validnost naloga
        		checkNalog(nalog);
        		//kreirati MT103
        		Mt103 rtgsNalog = new Mt103();
        		rtgsNalog.setIDPoruke(null); // Sta radimo sa ID-om???
        		rtgsNalog.setDatumValute(Util.getXMLGregorianCalendarNow());
        		rtgsNalog.setSifraValute(nalog.getPlacanje().getSifraValute());
        		rtgsNalog.setUplata(nalog.getPlacanje().getUplata());
        		PodaciOBankama pob = new PodaciOBankama();
        		String cbOznakaBankeDuznika = nalog.getPlacanje().getUplata().getRacunDuznika().getBrojRacuna().substring(0, 2); 
        		String cbOznakaBankePoverioca = nalog.getPlacanje().getUplata().getRacunPrimaoca().getBrojRacuna().substring(0, 2);
        		//Proveriti sa CB, dobiti banke
        		TBanka bankaDuznika = new TBanka();
        		TBanka bankaPoverioca = new TBanka();
        		///////////////////////////////
        		pob.setBankaDuznika(bankaDuznika);
        		pob.setBankaPoverioca(bankaPoverioca);
        		rtgsNalog.setPodaciOBankama(pob);
        		
        		//rezervisati sredstva klijenta (raspoloziva sredstva)
        		//uzeti broj racuna iz baze, ovo je temporary solution
        		TBankarskiRacunKlijenta ban_racun = new TBankarskiRacunKlijenta();
        		TRacunKlijenta klijent_racun = new TRacunKlijenta();
        		klijent_racun.setId(null);
        		klijent_racun.setBrojRacuna("");
        		klijent_racun.setVlasnik("");
        		ban_racun.setRacun(klijent_racun);
        		ban_racun.setRaspolozivaSredstva(ban_racun.getStanje());
        		ban_racun.setValuta("RSD");
        		double iznos = nalog.getPlacanje().getUplata().getIznos().doubleValue();
        		ban_racun.setRaspolozivaSredstva(ban_racun.getRaspolozivaSredstva() - iznos);
        		//poslati MT103
        		URL wsdl = new URL("http://localhost:8080/XMLProject/services/CentralnaBanka?wsdl"); // 8080 ili 9090? Vidi wsdl, tamo je za port naveden 9090
    	    	QName serviceName = new QName("http://www.project.com/CBws", "CBservice"); //Nije dobar prvi parametar, moramo videti kod Ljilje sta je ona podesila
    	    	QName portName = new QName("http://www.project.com/CBws", "CBport");
    	    	
    	    	Service service = Service.create(wsdl, serviceName);
    	    	
    	        //CB centralnaBanka = service.getPort(portName, CB.class); moramo imati CB u nasem projektu?
    	        //centralnaBanka.recieveMT103CB(rtgsNalog);
    	    	

        		//status _return postaviti da je primljena poruka ili tako nesto
    	    	_return.setStatusCode(1);
    	    	_return.setStatusText("Your payment order has been received and sent to processing.");
        	}
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveNalogFault("receiveNalogFault...");
    }
    
    public void checkNalog(NalogZaPlacanje nalog) {
    	//da li klijent ima toliko para na racunu
    	//da li su validni formati racuna
    	//da li postoji ta druga banka
    	//da li je racun druge strane u istoj banci
    	//valuta stanja na racunu i valuta placanja -> Kursni list?
    	//exceptioni za sve ovo
    }

}
