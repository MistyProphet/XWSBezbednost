
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.project.bankaws;

import java.math.BigDecimal;
import java.net.URL;
import java.util.logging.Logger;

import javax.ejb.Stateless;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;

import misc.RESTUtil;

import com.project.banka.Banka;
import com.project.banka.RTGSProccessing;
import com.project.common_types.TBanka;
import com.project.common_types.TBankarskiRacunKlijenta;
import com.project.exceptions.NoMoneyException;
import com.project.exceptions.WrongBankException;
import com.project.mt103.Mt103;
import com.project.mt900.Mt900RTGS;
import com.project.mt900.Mt900RTGS.PodaciOZaduzenju;
import com.project.nalog_za_placanje.NalogZaPlacanje;
import com.project.stavka_preseka.Transakcija;
import com.project.util.CBport;
import com.project.util.Util;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2015-06-07T02:41:04.821+02:00
 * Generated source version: 2.6.5
 * 
 */
@Stateless

@javax.jws.WebService(
                      serviceName = "BankaService",
                      portName = "BankaPort",
                      targetNamespace = "http://www.project.com/BankaWS",
                      wsdlLocation = "file:/C:/Users/Geek/Desktop/Wp/XWSEclipse/XMLProject/WEB-INF/wsdl/Banka.wsdl",
                      endpointInterface = "com.project.bankaws.BankaPort")
                      
public class BankaPortImpl implements BankaPort {

    private static final Logger LOG = Logger.getLogger(BankaPortImpl.class.getName());
    public Banka current_bank;
    private RTGSProccessing rtgsObrada = null;
    
    public void init() {
    	current_bank = new Banka(); //Ovo promeniti na specificnu banku?
    	//Podesiti swift kod
    	current_bank.init();
    	rtgsObrada = new RTGSProccessing(this);
    }
    
    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#odradiClearing(*
     */
    public com.project.common_types.Status odradiClearing() throws ClearingFault { 
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ClearingFault("clearingFault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT910(com.project.mt910.Mt910  mt910 )*
     */
    public com.project.common_types.Status receiveMT910(com.project.mt910.Mt910 mt910) throws ReceiveMT103Fault    { 
        LOG.info("Executing operation receiveMT910");
        System.out.println(mt910);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT103Fault("receiveMT103fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT102(com.project.mt102.Mt102  mt102 )*
     */
    public com.project.common_types.Status receiveMT102(com.project.mt102.Mt102 mt102) throws ReceiveMT102Fault    { 
        LOG.info("Executing operation receiveMT102");
        try {
	        current_bank.obradiClearingNalog(mt102);
	        System.out.println(mt102);
	        com.project.common_types.Status _return = new com.project.common_types.Status();
	        return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new ReceiveMT102Fault(ex.getMessage());
        }
        //throw new ReceiveMT102Fault("receiveMT102fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#sendPresek(com.project.zahtev_za_izvod.ZahtevZaIzvod  zahtev )*
     */
    public com.project.presek.Presek sendPresek(com.project.zahtev_za_izvod.ZahtevZaIzvod zahtev) throws SendPresekFault    { 
        LOG.info("Executing operation sendPresek");
        System.out.println(zahtev);

        try {
            current_bank.formirajPresek(zahtev);
            com.project.presek.Presek _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new SendPresekFault(ex.getMessage());
        }
        //throw new SendPresekFault("sendPresekFault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT103(com.project.mt103.Mt103  mt103 )*
     */
    public com.project.common_types.Status receiveMT103(com.project.mt103.Mt103 mt103) throws ReceiveMT103Fault   { 

        try {
            LOG.info("Executing operation receiveMT103");
            current_bank.obradiRTGSNalog(mt103);
            System.out.println(mt103);
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new ReceiveMT103Fault(ex.getMessage());
        }
        //throw new ReceiveMT103Fault("receiveMT103fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveNalog(com.project.nalog_za_placanje.NalogZaPlacanje  nalog )*
     */
    public com.project.common_types.Status receiveNalog(NalogZaPlacanje nalog) throws ReceiveNalogFault    { 
        LOG.info("Executing operation receiveNalog...");
        //System.out.println(nalog);
        com.project.common_types.Status _return = new com.project.common_types.Status();
        try {
        	//proveriti validnost naloga
    		checkNalog(nalog);
    		//provera da li je racun primaoca u istoj banci
    		String broj_rk_primaoca = nalog.getPlacanje().getUplata().getRacunPrimaoca().getBrojRacuna();
    		TBankarskiRacunKlijenta racun_primaoca = current_bank.getSpecificAccount(broj_rk_primaoca);
    		if(racun_primaoca != null){
    			//ako jeste, prebaciti odmah pare
    			Transakcija transakcijaPrimalac = current_bank.generisiTransakcijuUplate(nalog);
    			String broj_rk_duznika = nalog.getPlacanje().getUplata().getRacunDuznika().getBrojRacuna();
    			TBankarskiRacunKlijenta racun_duznika = current_bank.getSpecificAccount(broj_rk_duznika);
    			if(racun_duznika != null){
    				BigDecimal iznos = nalog.getPlacanje().getUplata().getIznos();
    				/* Generisanje podataka o transakciji*/
					Transakcija transakcijaDuznik = current_bank.generisiTransakcijuIsplate(nalog);
					
    				if(racun_duznika.getRaspolozivaSredstva().subtract(iznos).compareTo(new BigDecimal(0))>=0){
    					//duznik ima dovoljno para, skidamo pare
    					transakcijaDuznik.setStanjePreTransakcije(racun_duznika.getStanje());
    					racun_duznika.setRaspolozivaSredstva(racun_duznika.getRaspolozivaSredstva().subtract(iznos));
    					transakcijaDuznik.setStanjePosleTransakcije(racun_duznika.getStanje());
    					//dodajemo primaocu
    					transakcijaPrimalac.setStanjePreTransakcije(racun_primaoca.getStanje());
    					racun_primaoca.setStanje(racun_primaoca.getStanje().add(iznos));
    					racun_primaoca.setRaspolozivaSredstva(racun_primaoca.getRaspolozivaSredstva().add(iznos));
    					transakcijaPrimalac.setStanjePosleTransakcije(racun_primaoca.getStanje());
    					
    					//Status da je poruka obradjena bez greske
    	    	    	_return.setStatusCode(1);
    	    	    	_return.setStatusText("Your payment order has been received and proccessed.");
    	    	    	return _return;
    				} else {
    					//no-money exception
    					throw new NoMoneyException();
    				}
    			} else {
    				//wrong-bank exception
    				throw new WrongBankException();
    			}
    		}
        	if(!nalog.isHitno() || (nalog.getPlacanje().getUplata().getIznos().compareTo(BigDecimal.valueOf(250000.0)) == -1)){
        		current_bank.addNalogZaClearing(nalog);
        	} else {
        		//RTGS
        		Mt103 rtgsNalog = rtgsObrada.kreirajMT103(nalog);
        		//spustanje mt103 u bazu
        		//Mt103Service servis = new Mt103Service();
        		//servis.create(rtgsNalog);
        		//slanje MT103
        		URL wsdl = new URL("http://localhost:8080/XML_CB/services/Banka?wsdl");
    	    	QName serviceName = new QName("http://www.project.com/CBws", "CBservice");
    	    	QName portName = new QName("http://www.project.com/CBws", "CBport");
    	    	
    	    	Service service = Service.create(wsdl, serviceName);
    	        CBport centralnaBanka = service.getPort(portName, CBport.class);
    	        Mt900RTGS rtgsResponse = centralnaBanka.recieveMT103CB(rtgsNalog);
    	        
    	        //Spustanje odgovora u bazu
    	        //Mt900RTGSService tempServis = new Mt900RTGSService();
    	        //tempServis.create(rtgsResponse);
    	        
        		//Status klijentu da je poruka obradjena bez greske
    	    	_return.setStatusCode(1);
    	    	_return.setStatusText("Your payment order has been received and sent to processing.");
        	}
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new ReceiveNalogFault(ex.getMessage());
        }
    }
    
    public void checkNalog(NalogZaPlacanje nalog) throws Exception {
    	//da li su validni formati racuna
    	//da li postoji ta druga banka
    	//da li su sva polja ispunjena
    }
    
    public static void main(String[] args) {
    	//test area
    	Mt900RTGS test = new Mt900RTGS();
    	PodaciOZaduzenju pod = new PodaciOZaduzenju();
    	TBanka t = new TBanka();
    	t.setBrojRacunaBanke("123456789112345678");
    	t.setNazivBanke("ABC");
    	t.setSWIFTKod("33334568");
    	pod.setBankaDuznika(t);
    	try {
			pod.setDatumValute(Util.getXMLGregorianCalendarNow());
		} catch (DatatypeConfigurationException e) {
			e.printStackTrace();
			e.getCause().printStackTrace();
		}
    	pod.setIDPorukeNaloga("");
    	double c=5000.0;
        BigDecimal b = new BigDecimal(c);
    	pod.setIznos(b);
    	pod.setSifraValute("RSD");
    	test.setIDPoruke("1");
    	test.setPodaciOZaduzenju(pod);
    	t.setId(Long.parseLong("1234"));
    	//Mt900RTGSService r = new Mt900RTGSService();
    	//r.create(test);
    	RESTUtil.objectToDB("Poruke/MT900", test.getIDPoruke(), test);
    }

}
