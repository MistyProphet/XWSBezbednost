
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.project.bankaws;

import java.math.BigDecimal;
import java.net.URL;
import java.util.logging.Logger;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;

import com.project.banka.Banka;
import com.project.common_types.TBanka;
import com.project.common_types.TBankarskiRacunKlijenta;
import com.project.exceptions.NoMoneyException;
import com.project.exceptions.WrongBankException;
import com.project.mt103.Mt103;
import com.project.mt103.Mt103.PodaciOBankama;
import com.project.nalog_za_placanje.NalogZaPlacanje;
import com.project.util.Util;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2015-06-07T02:41:04.821+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "BankaService",
                      portName = "BankaPort",
                      targetNamespace = "http://www.project.com/BankaWS",
                      wsdlLocation = "file:/C:/Users/Geek/Desktop/Wp/XWSEclipse/XMLProject/WEB-INF/wsdl/Banka.wsdl",
                      endpointInterface = "com.project.bankaws.BankaPort")
                      
public class BankaPortImpl implements BankaPort {

    private static final Logger LOG = Logger.getLogger(BankaPortImpl.class.getName());
    private Banka current_bank;
    private Integer mt103ID = 1;
    
    public void init() {
    	current_bank = new Banka(); //Ovo promeniti na specificnu banku?
    	//Podesiti swift kod
    	current_bank.init();
    }
    
    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#odradiClearing(*
     */
    public com.project.common_types.Status odradiClearing() throws ClearingFault    { 
        LOG.info("Executing operation odradiClearing");
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ClearingFault("clearingFault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT910(com.project.mt910.Mt910  mt910 )*
     */
    public com.project.common_types.Status receiveMT910(com.project.mt910.Mt910 mt910) throws ReceiveMT103Fault    { 
        LOG.info("Executing operation receiveMT910");
        System.out.println(mt910);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT103Fault("receiveMT103fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT102(com.project.mt102.Mt102  mt102 )*
     */
    public com.project.common_types.Status receiveMT102(com.project.mt102.Mt102 mt102) throws ReceiveMT102Fault    { 
        LOG.info("Executing operation receiveMT102");
        System.out.println(mt102);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT102Fault("receiveMT102fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#sendPresek(com.project.zahtev_za_izvod.ZahtevZaIzvod  zahtev )*
     */
    public com.project.presek.Presek sendPresek(com.project.zahtev_za_izvod.ZahtevZaIzvod zahtev) throws SendPresekFault    { 
        LOG.info("Executing operation sendPresek");
        System.out.println(zahtev);
        try {
            com.project.presek.Presek _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new SendPresekFault("sendPresekFault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveMT103(com.project.mt103.Mt103  mt103 )*
     */
    public com.project.common_types.Status receiveMT103(com.project.mt103.Mt103 mt103) throws ReceiveMT103Fault    { 
        LOG.info("Executing operation receiveMT103");
        System.out.println(mt103);
        try {
            com.project.common_types.Status _return = new com.project.common_types.Status();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new ReceiveMT103Fault("receiveMT103fault...");
    }

    /* (non-Javadoc)
     * @see com.project.bankaws.BankaPort#receiveNalog(com.project.nalog_za_placanje.NalogZaPlacanje  nalog )*
     */
    public com.project.common_types.Status receiveNalog(com.project.nalog_za_placanje.NalogZaPlacanje nalog) throws ReceiveNalogFault    { 
        LOG.info("Executing operation receiveNalog...");
        //System.out.println(nalog);
        com.project.common_types.Status _return = new com.project.common_types.Status();
        try {
        	if(!nalog.isHitno() || (nalog.getPlacanje().getUplata().getIznos().compareTo(BigDecimal.valueOf(250000.0)) == -1)){
        		//Clearing
        	} else {
        		//RTGS
        		//proveriti validnost naloga
        		checkNalog(nalog);
            	//provera da li je racun primaoca u istoj banci
        		String broj_rk_primaoca = nalog.getPlacanje().getUplata().getRacunPrimaoca().getBrojRacuna();
        		TBankarskiRacunKlijenta racun_primaoca = current_bank.getSpecificAccount(broj_rk_primaoca);
        		if(racun_primaoca != null){
        			//ako jeste, prebaciti odmah pare
        			String broj_rk_duznika = nalog.getPlacanje().getUplata().getRacunDuznika().getBrojRacuna();
        			TBankarskiRacunKlijenta racun_duznika = current_bank.getSpecificAccount(broj_rk_duznika);
        			if(racun_duznika != null){
        				double iznos = nalog.getPlacanje().getUplata().getIznos().doubleValue();
        				if(racun_duznika.getRaspolozivaSredstva() >= iznos){
        					//duznik ima dovoljno para, skidamo pare
        					racun_duznika.setRaspolozivaSredstva(racun_duznika.getRaspolozivaSredstva() - iznos);
        					//dodajemo primaocu
        					racun_primaoca.setStanje(racun_primaoca.getStanje() + iznos);
        					racun_primaoca.setRaspolozivaSredstva(racun_primaoca.getRaspolozivaSredstva() + iznos);
        				} else {
        					//no-money exception
        					throw new NoMoneyException();
        				}
        			} else {
        				//wrong-bank exception
        				throw new WrongBankException();
        			}
        		}else {
        			//ako nije, kreirati MT103 nalog i poslati CB
            		Mt103 rtgsNalog = new Mt103();
            		rtgsNalog.setIDPoruke((mt103ID++).toString());
            		rtgsNalog.setDatumValute(Util.getXMLGregorianCalendarNow());
            		rtgsNalog.setSifraValute(nalog.getPlacanje().getSifraValute());
            		rtgsNalog.setUplata(nalog.getPlacanje().getUplata());
            		
            		PodaciOBankama pob = new PodaciOBankama();
            		String cbOznakaBankePoverioca = nalog.getPlacanje().getUplata().getRacunPrimaoca().getBrojRacuna().substring(0, 2);
            		//Proveriti sa CB, dobiti banku na osnovu prve tri cifre racuna. To je jedinstvena oznaka banke kod CB
            		TBanka bankaPoverioca = new TBanka();
            		///////////////////////////////
            		
            		
            		pob.setBankaDuznika(current_bank.getPodaci_o_banci());
            		pob.setBankaPoverioca(bankaPoverioca);
            		rtgsNalog.setPodaciOBankama(pob);
            		
            		//rezervisati sredstva klijenta (raspoloziva sredstva)
            		TBankarskiRacunKlijenta racun_duznika = current_bank.getSpecificAccount(nalog.getPlacanje().getUplata().getRacunDuznika().getBrojRacuna());
            		if(racun_duznika != null){
            			double iznos = nalog.getPlacanje().getUplata().getIznos().doubleValue();
            			if(racun_duznika.getRaspolozivaSredstva() >= iznos){
        					//duznik ima dovoljno para, skidamo pare
                			racun_duznika.setRaspolozivaSredstva(racun_duznika.getRaspolozivaSredstva() - iznos);
        				} else {
        					//no-money exception
        					throw new NoMoneyException();
        				}
            		} else {
        				//wrong-bank exception
        				throw new WrongBankException();
            		}
            		
            		//poslati MT103
            		URL wsdl = new URL("http://localhost:8080/XML_CB/services/Banka?wsdl");
        	    	QName serviceName = new QName("http://www.project.com/CBws", "BankaService");
        	    	QName portName = new QName("http://www.project.com/CBws", "BankaPort");
        	    	
        	    	Service service = Service.create(wsdl, serviceName);
        	    	
        	        //CB centralnaBanka = service.getPort(portName, CB.class); //ubaciti Ljiljine klase
        	        //centralnaBanka.recieveMT103CB(rtgsNalog);
        		}

        		//Status da je poruka obradjena bez greske
    	    	_return.setStatusCode(1);
    	    	_return.setStatusText("Your payment order has been received and sent to processing.");
        	}
            return _return;
        } catch (java.lang.Exception ex) {
        	//_return.setStatusCode(-1); //Dogovoriti kodove greski. 1 za ok, -1 za gresku
        	//_return.setStatusText("An error occured. Your payment hasn't been processed.");//Da li i ovo vracamo?
            ex.printStackTrace();
            throw new ReceiveNalogFault("An error occured. Your payment hasn't been processed.");
        }
        //throw new ReceiveNalogFault("receiveNalogFault...");
    }
    
    public void checkNalog(NalogZaPlacanje nalog) throws Exception {
    	//da li su validni formati racuna
    	//da li postoji ta druga banka
    	//valuta stanja na racunu i valuta placanja -> Kursni list?
    }
    
    public static void main(String[] args) {
    	//test area
    }

}
