/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.project.cbws;

import java.math.BigDecimal;
import java.net.URL;
import java.util.ArrayList;
import java.util.GregorianCalendar;

import javax.jws.HandlerChain;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;

import misc.RESTUtil;

import com.project.banka.BankaPort;
import com.project.common_types.TBanka;
import com.project.common_types.TRacunKlijenta;
import com.project.mt102.Mt102;
import com.project.mt103.Mt103;
import com.project.mt103.Mt103.PodaciOBankama;
import com.project.mt900.Mt900Clearing;
import com.project.mt900.Mt900RTGS;
import com.project.mt910.Mt910;
import com.project.nalog_za_placanje.Placanje;
import com.project.nalog_za_placanje.Uplata;

/**
 * This class was generated by Apache CXF 2.6.5 2015-06-08T18:34:00.001+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(serviceName = "CBservice", portName = "CBport", targetNamespace = "http://www.project.com/CBws", wsdlLocation = "WEB-INF/wsdl/Banka.wsdl", endpointInterface = "com.project.cbws.CBport")
@HandlerChain(file = "/com/project/document/handler-chain-document.xml")
public class CBportImpl implements CBport {

	//private static final Logger LOG = Logger.getLogger(CBportImpl.class.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.project.cbws.CBport#receiveMT102CB(com.project.mt102.Mt102 mt102
	 * )*
	 */
	public com.project.mt900.Mt900Clearing receiveMT102CB(
			com.project.mt102.Mt102 mt102) throws ReceiveMT102Fault {
		try { // TODO 4 sve poruke MT103, MT900 i MT910 snimiti u bazu (rekao
				// cverdelj) npr CB/MT103 itd..
			RESTUtil.objectToDB("MT102", mt102.getIDPoruke(), mt102,
					"mt102.xsd");
			CBUtil.ClearingTransaction(mt102);
			
			
			URL wsdl;
				wsdl = new URL("http://localhost:8080/proj/services/Banka?wsdl");
		    	QName serviceName = new QName("http://www.project.com/BankaWS", "BankaService");
		    	QName portName = new QName("http://www.project.com/BankaWS", "BankaPort");
		    	Service service = Service.create(wsdl, serviceName);
		        BankaPort bankaPort = service.getPort(portName, BankaPort.class);
	        
	        
				// Service service = Service.create(new URL("wsdlbanke"),
				// new QName("serviceNAme"));
				// BankaPort bankaPort =
				// service.getPort(new
				// QName(BankaPort.class.getAnnotation(WebService.class).name()),BankaPort.class);
				Mt910 mt910 = new Mt910(mt102);
			
				mt910.setIDPoruke(String.valueOf(CBUtil.getMaxTransactionID("MT910")+1));
				// bankaPort.receiveMT910(mt910);
				RESTUtil.objectToDB("MT910", mt910.getIDPoruke(), mt910,
						"mt910.xsd");
				bankaPort.receiveMT102(mt102);
				Mt900Clearing mt900 = new Mt900Clearing(mt102);
				mt900.setIDPoruke(String.valueOf(CBUtil.getMaxTransactionID("MT900")+1));
				//mt900.setIDPoruke("1");
				RESTUtil.objectToDB("MT900", mt900.getIDPoruke(), mt900,
						"mt900.xsd");
				return mt900;

		} catch (ReceiveMT102Fault e) {
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getCause());
			System.out.println(e.getMessage());
		}
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.project.cbws.BankaPort#receiveMT103CB(com.project.mt103.Mt103
	 * mt103 )*
	 */
	public com.project.mt900.Mt900RTGS receiveMT103CB(
			com.project.mt103.Mt103 mt103) throws ReceiveMT103Fault {

		try {
			RESTUtil.objectToDB("MT103", mt103.getIDPoruke(), mt103,
					"mt103.xsd");
			CBUtil.RTGSTransaction(mt103.getPodaciOBankama().getBankaDuznika()
					.getSWIFTKod(), mt103.getPodaciOBankama()
					.getBankaPoverioca().getSWIFTKod(), mt103.getUplata()
					.getIznos());

			URL wsdl;
			wsdl = new URL("http://localhost:8080/proj/services/Banka?wsdl");
	    	QName serviceName = new QName("http://www.project.com/BankaWS", "BankaService");
	    	QName portName = new QName("http://www.project.com/BankaWS", "BankaPort");
	    	Service service = Service.create(wsdl, serviceName);
	        BankaPort bankaPort = service.getPort(portName, BankaPort.class);
			Mt910 mt910 = new Mt910(mt103);
			mt910.setIDPoruke(String.valueOf(CBUtil.getMaxTransactionID("MT910")+1));
			//bankaPort.receiveMT910(mt910);
			
			RESTUtil.objectToDB("MT910", mt910.getIDPoruke(), mt910,
					"mt910.xsd");
			// bankaPort.receiveMT103(mt103);
			Mt900RTGS mt900 = new Mt900RTGS(mt103);
			//mt900.setIDPoruke(("1"));
			mt900.setIDPoruke(String.valueOf(CBUtil.getMaxTransactionID("MT900")+1));
			RESTUtil.objectToDB("MT900", mt900.getIDPoruke(), mt900,
					"mt900.xsd");
			return mt900;

		} catch (ReceiveMT103Fault e) {
			// TODO Auto-generated catch block
			throw e;
		} catch (ReceiveMT102Fault e) {
			throw new ReceiveMT103Fault(e.getMessage());
		} catch (Exception e) {
			throw new ReceiveMT103Fault(e.getMessage());
		}
	}

	public static void main(String[] args) {

		Mt103 request = new Mt103();
		request.setIDPoruke("1");
		PodaciOBankama pb = new PodaciOBankama();
		TBanka duznik = new TBanka();
		duznik.setBrojRacunaBanke("001-0000000000001-00");
		duznik.setSWIFTKod("AAAARS01");
		duznik.setId(new Long(111));
		duznik.setNazivBanke("UniCredit");
		TBanka poverioc = new TBanka();
		poverioc.setBrojRacunaBanke("001-0000000000001-00");
		poverioc.setSWIFTKod("AAAARS01");
		poverioc.setNazivBanke("Raiffeisen");
		poverioc.setId(new Long(112));
		pb.setBankaDuznika(duznik);
		pb.setBankaPoverioca(poverioc);
		request.setPodaciOBankama(pb);

		Uplata u = new Uplata();
		u.setIznos(new BigDecimal(323));
		u.setModelOdobrenja(new Long(97));
		u.setModelZaduzenja(new Long(97));
		u.setPozivNaBrojOdobrenja("22222222222222222222");
		u.setPozivNaBrojZaduzenja("22222222222222222222");
		u.setSvrhaPlacanja("svrha placanja");
		TRacunKlijenta tr = new TRacunKlijenta();
		tr.setBrojRacuna(duznik.getBrojRacunaBanke());
		tr.setId(new Long(111));
		tr.setVlasnik("Vlasnik");
		u.setRacunPrimaoca(tr);
		u.setRacunDuznika(tr);
		request.setUplata(u);
		//Mt900RTGS response;
		request.setSifraValute("RSD");
		Mt102 mt102 = new Mt102();
		mt102.setBankaDuznika(duznik);
		mt102.setBankaPoverioca(poverioc);
		mt102.setIDPoruke("434");

		mt102.setUkupanIznos((new BigDecimal(323)));
		ArrayList<Placanje> placanja = new ArrayList<Placanje>();
		Placanje placanje = new Placanje();
		placanje.setUplata(u);
		placanje.setIDPoruke("1");
		placanje.setSifraValute("RSD");
		placanja.add(placanje);
		
		
		mt102.setPlacanje(placanja);
		GregorianCalendar cal = new GregorianCalendar();
		DatatypeFactory datatypeFactory;
		try {
			datatypeFactory = DatatypeFactory.newInstance();

			XMLGregorianCalendar now = datatypeFactory
					.newXMLGregorianCalendar(cal);
			mt102.setDatum(now);
			mt102.getPlacanje().get(0).getUplata().setDatumNaloga(now);
			//mt102.getPlacanje().get(1).getUplata().setDatumNaloga(now);
			mt102.setDatumValute(now);
		} catch (DatatypeConfigurationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		mt102.setSifraValute("RSD");
		CBportImpl b = new CBportImpl();
		try {
			 b.receiveMT103CB(request);
			//b.receiveMT102CB(mt102);
		} catch (ReceiveMT103Fault e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
